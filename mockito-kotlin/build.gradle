apply plugin: 'kotlin'
apply from: '../publishing.gradle'
apply plugin: 'org.jetbrains.dokka'

buildscript {
    ext.kotlin_version = System.getenv("KOTLIN_VERSION") ?: '1.0.7'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.14"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3"
        classpath "com.github.dcendents:android-maven-gradle-plugin:1.5"
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.mockito:mockito-core:2.9.0"

    /* Tests */
    testCompile "junit:junit:4.12"
    testCompile "com.nhaarman:expect.kt:0.6.2"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"

    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/nhaarman/mockito-kotlin/tree/master/mockito-kotlin/src/main/kotlin"
        suffix = "#L"
    }
}
javadoc.dependsOn dokka

//Switch inline
task createTestResources << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    if (System.env.MOCK_MAKER != null) {
        logger.warn("! Using MockMaker ${System.env.MOCK_MAKER}")
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write(System.env.MOCK_MAKER)
    } else {
        logger.warn("! Using default MockMaker")
    }
}

task removeTestResources << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    if (mockMakerFile.exists()) {
        mockMakerFile.delete()
    }
}

test.dependsOn createTestResources
test.finalizedBy removeTestResources
